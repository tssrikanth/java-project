/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import localhost.ApiHelper;
import localhost.AuthManager;
import localhost.Configuration;
import localhost.exceptions.ApiException;
import localhost.exceptions.ErrorResponseException;
import localhost.http.Headers;
import localhost.http.client.HttpCallback;
import localhost.http.client.HttpClient;
import localhost.http.client.HttpContext;
import localhost.http.request.HttpRequest;
import localhost.http.response.HttpResponse;
import localhost.http.response.HttpStringResponse;
import localhost.models.CreateTableResponse;
import localhost.models.TspublicRestV2DatabaseTableCreateRequest;
import localhost.models.TspublicRestV2DatabaseTableRunqueryRequest;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DatabaseController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DatabaseController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }

    /**
     * Initializes the controller with HTTPCallback.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     * @param httpCallback    Callback to be called before and after the HTTP call.
     */
    public DatabaseController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers, HttpCallback httpCallback) {
        super(config, httpClient, authManagers, httpCallback);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments To list all the databases in
     * Falcon, use this endpoint.
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> getDatabases() throws ApiException, IOException {
        HttpRequest request = buildGetDatabasesRequest();
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetDatabasesResponse(context);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments To list all the databases in
     * Falcon, use this endpoint.
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> getDatabasesAsync() {
        return makeHttpCallAsync(() -> buildGetDatabasesRequest(),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetDatabasesResponse(context));
    }

    /**
     * Builds the HttpRequest object for getDatabases.
     */
    private HttpRequest buildGetDatabasesRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/database");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-Requested-By", config.getXRequestedBy());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getDatabases.
     * @return An object of type List of String
     */
    private List<String> handleGetDatabasesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<String> result = ApiHelper.deserializeArray(responseBody,
                String[].class);

        return result;
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments To list all the schemas in a
     * database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> getSchemas(
            final String database) throws ApiException, IOException {
        HttpRequest request = buildGetSchemasRequest(database);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetSchemasResponse(context);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments To list all the schemas in a
     * database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> getSchemasAsync(
            final String database) {
        return makeHttpCallAsync(() -> buildGetSchemasRequest(database),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetSchemasResponse(context));
    }

    /**
     * Builds the HttpRequest object for getSchemas.
     */
    private HttpRequest buildGetSchemasRequest(
            final String database) {
        //validating required parameters
        if (null == database) {
            throw new NullPointerException("The parameter \"database\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/database/schema");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("database", database);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-Requested-By", config.getXRequestedBy());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getSchemas.
     * @return An object of type List of String
     */
    private List<String> handleGetSchemasResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<String> result = ApiHelper.deserializeArray(responseBody,
                String[].class);

        return result;
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To list all the tables in a
     * schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  schema  Required parameter: Name of the schema in Falcon database
     * @return    Returns the List of String response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<String> getTables(
            final String database,
            final String schema) throws ApiException, IOException {
        HttpRequest request = buildGetTablesRequest(database, schema);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetTablesResponse(context);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To list all the tables in a
     * schema of a database in Falcon, use this endpoint.
     * @param  database  Required parameter: Name of the Falcon database
     * @param  schema  Required parameter: Name of the schema in Falcon database
     * @return    Returns the List of String response from the API call
     */
    public CompletableFuture<List<String>> getTablesAsync(
            final String database,
            final String schema) {
        return makeHttpCallAsync(() -> buildGetTablesRequest(database, schema),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleGetTablesResponse(context));
    }

    /**
     * Builds the HttpRequest object for getTables.
     */
    private HttpRequest buildGetTablesRequest(
            final String database,
            final String schema) {
        //validating required parameters
        if (null == database) {
            throw new NullPointerException("The parameter \"database\" is a required parameter and cannot be null.");
        }

        if (null == schema) {
            throw new NullPointerException("The parameter \"schema\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/database/table");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("database", database);
        queryParameters.put("schema", schema);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("X-Requested-By", config.getXRequestedBy());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("Content-Type", config.getContentType());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for getTables.
     * @return An object of type List of String
     */
    private List<String> handleGetTablesResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<String> result = ApiHelper.deserializeArray(responseBody,
                String[].class);

        return result;
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To create a table in Falcon,
     * use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the CreateTableResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CreateTableResponse createTable(
            final TspublicRestV2DatabaseTableCreateRequest body) throws ApiException, IOException {
        HttpRequest request = buildCreateTableRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTableResponse(context);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To create a table in Falcon,
     * use this endpoint.
     * @param  body  Required parameter: Example:
     * @return    Returns the CreateTableResponse response from the API call
     */
    public CompletableFuture<CreateTableResponse> createTableAsync(
            final TspublicRestV2DatabaseTableCreateRequest body) {
        return makeHttpCallAsync(() -> buildCreateTableRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleCreateTableResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTable.
     */
    private HttpRequest buildCreateTableRequest(
            final TspublicRestV2DatabaseTableCreateRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/database/table/create");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("X-Requested-By", config.getXRequestedBy());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for createTable.
     * @return An object of type CreateTableResponse
     */
    private CreateTableResponse handleCreateTableResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        CreateTableResponse result = ApiHelper.deserialize(responseBody,
                CreateTableResponse.class);

        return result;
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To run a TQL statement in
     * Falcon, use this endpoint. You can run only following type of statements - Table DDL alter
     * and Table rows update and delete.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of Object response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Object> runQuery(
            final TspublicRestV2DatabaseTableRunqueryRequest body) throws ApiException, IOException {
        HttpRequest request = buildRunQueryRequest(body);
        authManagers.get("global").apply(request);

        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleRunQueryResponse(context);
    }

    /**
     * Note: This endpoint is applicable only for on-prem deployments. To run a TQL statement in
     * Falcon, use this endpoint. You can run only following type of statements - Table DDL alter
     * and Table rows update and delete.
     * @param  body  Required parameter: Example:
     * @return    Returns the List of Object response from the API call
     */
    public CompletableFuture<List<Object>> runQueryAsync(
            final TspublicRestV2DatabaseTableRunqueryRequest body) {
        return makeHttpCallAsync(() -> buildRunQueryRequest(body),
            req -> authManagers.get("global").applyAsync(req)
                .thenCompose(request -> getClientInstance()
                        .executeAsync(request, false)),
            context -> handleRunQueryResponse(context));
    }

    /**
     * Builds the HttpRequest object for runQuery.
     */
    private HttpRequest buildRunQueryRequest(
            final TspublicRestV2DatabaseTableRunqueryRequest body) throws JsonProcessingException {
        //validating required parameters
        if (null == body) {
            throw new NullPointerException("The parameter \"body\" is a required parameter and cannot be null.");
        }

        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/tspublic/rest/v2/database/table/runquery");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("X-Requested-By", config.getXRequestedBy());
        headers.add("Accept-Language", config.getAcceptLanguage());
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        String bodyJson = ApiHelper.serialize(body);
        HttpRequest request = getClientInstance().postBody(queryBuilder, headers, null, bodyJson);

        // Invoke the callback before request if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onBeforeRequest(request);
        }

        return request;
    }

    /**
     * Processes the response for runQuery.
     * @return An object of type List of Object
     */
    private List<Object> handleRunQueryResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallback() != null) {
            getHttpCallback().onAfterResponse(context);
        }

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 500) {
            throw new ErrorResponseException("Operation failed or unauthorized request", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        List<Object> result = ApiHelper.deserializeArray(responseBody,
                Object[].class);

        return result;
    }

}