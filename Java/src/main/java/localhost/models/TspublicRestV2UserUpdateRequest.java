/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for TspublicRestV2UserUpdateRequest type.
 */
public class TspublicRestV2UserUpdateRequest {
    private String name;
    private String id;
    private String displayName;
    private Visibility1Enum visibility;
    private String mail;
    private StateEnum state;
    private NotifyOnShareEnum notifyOnShare;
    private ShowWalkMeEnum showWalkMe;
    private AnalystOnboardingCompleteEnum analystOnboardingComplete;
    private Type3Enum type;
    private List<GroupNameAndIDInput> groups;

    /**
     * Default constructor.
     */
    public TspublicRestV2UserUpdateRequest() {
        visibility = Visibility1Enum.DEFAULT;
        state = StateEnum.ACTIVE;
        notifyOnShare = NotifyOnShareEnum.ENUM_TRUE;
        showWalkMe = ShowWalkMeEnum.ENUM_TRUE;
        analystOnboardingComplete = AnalystOnboardingCompleteEnum.ENUM_FALSE;
        type = Type3Enum.LOCAL_USER;
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  id  String value for id.
     * @param  displayName  String value for displayName.
     * @param  visibility  Visibility1Enum value for visibility.
     * @param  mail  String value for mail.
     * @param  state  StateEnum value for state.
     * @param  notifyOnShare  NotifyOnShareEnum value for notifyOnShare.
     * @param  showWalkMe  ShowWalkMeEnum value for showWalkMe.
     * @param  analystOnboardingComplete  AnalystOnboardingCompleteEnum value for
     *         analystOnboardingComplete.
     * @param  type  Type3Enum value for type.
     * @param  groups  List of GroupNameAndIDInput value for groups.
     */
    public TspublicRestV2UserUpdateRequest(
            String name,
            String id,
            String displayName,
            Visibility1Enum visibility,
            String mail,
            StateEnum state,
            NotifyOnShareEnum notifyOnShare,
            ShowWalkMeEnum showWalkMe,
            AnalystOnboardingCompleteEnum analystOnboardingComplete,
            Type3Enum type,
            List<GroupNameAndIDInput> groups) {
        this.name = name;
        this.id = id;
        this.displayName = displayName;
        this.visibility = visibility;
        this.mail = mail;
        this.state = state;
        this.notifyOnShare = notifyOnShare;
        this.showWalkMe = showWalkMe;
        this.analystOnboardingComplete = analystOnboardingComplete;
        this.type = type;
        this.groups = groups;
    }

    /**
     * Getter for Name.
     * Name of the user account. The username string must be unique.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of the user account. The username string must be unique.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Id.
     * The GUID of the user account
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * The GUID of the user account
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for DisplayName.
     * A display name string for the user, usually their first and last name.
     * @return Returns the String
     */
    @JsonGetter("displayName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Setter for DisplayName.
     * A display name string for the user, usually their first and last name.
     * @param displayName Value for String
     */
    @JsonSetter("displayName")
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /**
     * Getter for Visibility.
     * Visibility of the user account. The visibility attribute is set to DEFAULT when creating a
     * user. The DEFAULT attribute makes a user visible to other users and user groups, and thus
     * allows them to share objects.
     * @return Returns the Visibility1Enum
     */
    @JsonGetter("visibility")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Visibility1Enum getVisibility() {
        return visibility;
    }

    /**
     * Setter for Visibility.
     * Visibility of the user account. The visibility attribute is set to DEFAULT when creating a
     * user. The DEFAULT attribute makes a user visible to other users and user groups, and thus
     * allows them to share objects.
     * @param visibility Value for Visibility1Enum
     */
    @JsonSetter("visibility")
    public void setVisibility(Visibility1Enum visibility) {
        this.visibility = visibility;
    }

    /**
     * Getter for Mail.
     * Email id associated with the user account
     * @return Returns the String
     */
    @JsonGetter("mail")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMail() {
        return mail;
    }

    /**
     * Setter for Mail.
     * Email id associated with the user account
     * @param mail Value for String
     */
    @JsonSetter("mail")
    public void setMail(String mail) {
        this.mail = mail;
    }

    /**
     * Getter for State.
     * Status of user account. acitve or inactive.
     * @return Returns the StateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * Status of user account. acitve or inactive.
     * @param state Value for StateEnum
     */
    @JsonSetter("state")
    public void setState(StateEnum state) {
        this.state = state;
    }

    /**
     * Getter for NotifyOnShare.
     * User preference for receiving email notifications when another ThoughtSpot user shares
     * answers or pinboards.
     * @return Returns the NotifyOnShareEnum
     */
    @JsonGetter("notifyOnShare")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public NotifyOnShareEnum getNotifyOnShare() {
        return notifyOnShare;
    }

    /**
     * Setter for NotifyOnShare.
     * User preference for receiving email notifications when another ThoughtSpot user shares
     * answers or pinboards.
     * @param notifyOnShare Value for NotifyOnShareEnum
     */
    @JsonSetter("notifyOnShare")
    public void setNotifyOnShare(NotifyOnShareEnum notifyOnShare) {
        this.notifyOnShare = notifyOnShare;
    }

    /**
     * Getter for ShowWalkMe.
     * The user preference for revisiting the onboarding experience.
     * @return Returns the ShowWalkMeEnum
     */
    @JsonGetter("showWalkMe")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ShowWalkMeEnum getShowWalkMe() {
        return showWalkMe;
    }

    /**
     * Setter for ShowWalkMe.
     * The user preference for revisiting the onboarding experience.
     * @param showWalkMe Value for ShowWalkMeEnum
     */
    @JsonSetter("showWalkMe")
    public void setShowWalkMe(ShowWalkMeEnum showWalkMe) {
        this.showWalkMe = showWalkMe;
    }

    /**
     * Getter for AnalystOnboardingComplete.
     * ThoughtSpot provides an interactive guided walkthrough to onboard new users. The onboarding
     * experience leads users through a set of actions to help users get started and accomplish
     * their tasks quickly. The users can turn off the Onboarding experience and access it again
     * when they need assistance with the ThoughtSpot UI.
     * @return Returns the AnalystOnboardingCompleteEnum
     */
    @JsonGetter("analystOnboardingComplete")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AnalystOnboardingCompleteEnum getAnalystOnboardingComplete() {
        return analystOnboardingComplete;
    }

    /**
     * Setter for AnalystOnboardingComplete.
     * ThoughtSpot provides an interactive guided walkthrough to onboard new users. The onboarding
     * experience leads users through a set of actions to help users get started and accomplish
     * their tasks quickly. The users can turn off the Onboarding experience and access it again
     * when they need assistance with the ThoughtSpot UI.
     * @param analystOnboardingComplete Value for AnalystOnboardingCompleteEnum
     */
    @JsonSetter("analystOnboardingComplete")
    public void setAnalystOnboardingComplete(AnalystOnboardingCompleteEnum analystOnboardingComplete) {
        this.analystOnboardingComplete = analystOnboardingComplete;
    }

    /**
     * Getter for Type.
     * Type of user. LOCAL_USER indicates that the user is created locally in the ThoughtSpot
     * system.
     * @return Returns the Type3Enum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Type3Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Type of user. LOCAL_USER indicates that the user is created locally in the ThoughtSpot
     * system.
     * @param type Value for Type3Enum
     */
    @JsonSetter("type")
    public void setType(Type3Enum type) {
        this.type = type;
    }

    /**
     * Getter for Groups.
     * A JSON array of group names or GUIDs or both. When both are given then id is considered
     * @return Returns the List of GroupNameAndIDInput
     */
    @JsonGetter("groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<GroupNameAndIDInput> getGroups() {
        return groups;
    }

    /**
     * Setter for Groups.
     * A JSON array of group names or GUIDs or both. When both are given then id is considered
     * @param groups Value for List of GroupNameAndIDInput
     */
    @JsonSetter("groups")
    public void setGroups(List<GroupNameAndIDInput> groups) {
        this.groups = groups;
    }

    /**
     * Converts this TspublicRestV2UserUpdateRequest into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TspublicRestV2UserUpdateRequest [" + "name=" + name + ", id=" + id
                + ", displayName=" + displayName + ", visibility=" + visibility + ", mail=" + mail
                + ", state=" + state + ", notifyOnShare=" + notifyOnShare + ", showWalkMe="
                + showWalkMe + ", analystOnboardingComplete=" + analystOnboardingComplete
                + ", type=" + type + ", groups=" + groups + "]";
    }

    /**
     * Builds a new {@link Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .id(getId())
                .displayName(getDisplayName())
                .visibility(getVisibility())
                .mail(getMail())
                .state(getState())
                .notifyOnShare(getNotifyOnShare())
                .showWalkMe(getShowWalkMe())
                .analystOnboardingComplete(getAnalystOnboardingComplete())
                .type(getType())
                .groups(getGroups());
        return builder;
    }

    /**
     * Class to build instances of {@link TspublicRestV2UserUpdateRequest}.
     */
    public static class Builder {
        private String name;
        private String id;
        private String displayName;
        private Visibility1Enum visibility = Visibility1Enum.DEFAULT;
        private String mail;
        private StateEnum state = StateEnum.ACTIVE;
        private NotifyOnShareEnum notifyOnShare = NotifyOnShareEnum.ENUM_TRUE;
        private ShowWalkMeEnum showWalkMe = ShowWalkMeEnum.ENUM_TRUE;
        private AnalystOnboardingCompleteEnum analystOnboardingComplete =
                AnalystOnboardingCompleteEnum.ENUM_FALSE;
        private Type3Enum type = Type3Enum.LOCAL_USER;
        private List<GroupNameAndIDInput> groups;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Setter for visibility.
         * @param  visibility  Visibility1Enum value for visibility.
         * @return Builder
         */
        public Builder visibility(Visibility1Enum visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * Setter for mail.
         * @param  mail  String value for mail.
         * @return Builder
         */
        public Builder mail(String mail) {
            this.mail = mail;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  StateEnum value for state.
         * @return Builder
         */
        public Builder state(StateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for notifyOnShare.
         * @param  notifyOnShare  NotifyOnShareEnum value for notifyOnShare.
         * @return Builder
         */
        public Builder notifyOnShare(NotifyOnShareEnum notifyOnShare) {
            this.notifyOnShare = notifyOnShare;
            return this;
        }

        /**
         * Setter for showWalkMe.
         * @param  showWalkMe  ShowWalkMeEnum value for showWalkMe.
         * @return Builder
         */
        public Builder showWalkMe(ShowWalkMeEnum showWalkMe) {
            this.showWalkMe = showWalkMe;
            return this;
        }

        /**
         * Setter for analystOnboardingComplete.
         * @param  analystOnboardingComplete  AnalystOnboardingCompleteEnum value for
         *         analystOnboardingComplete.
         * @return Builder
         */
        public Builder analystOnboardingComplete(
                AnalystOnboardingCompleteEnum analystOnboardingComplete) {
            this.analystOnboardingComplete = analystOnboardingComplete;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  Type3Enum value for type.
         * @return Builder
         */
        public Builder type(Type3Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for groups.
         * @param  groups  List of GroupNameAndIDInput value for groups.
         * @return Builder
         */
        public Builder groups(List<GroupNameAndIDInput> groups) {
            this.groups = groups;
            return this;
        }

        /**
         * Builds a new {@link TspublicRestV2UserUpdateRequest} object using the set fields.
         * @return {@link TspublicRestV2UserUpdateRequest}
         */
        public TspublicRestV2UserUpdateRequest build() {
            return new TspublicRestV2UserUpdateRequest(name, id, displayName, visibility, mail,
                    state, notifyOnShare, showWalkMe, analystOnboardingComplete, type, groups);
        }
    }
}
