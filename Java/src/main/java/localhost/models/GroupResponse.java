/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for GroupResponse type.
 */
public class GroupResponse {
    private String name;
    private String displayName;
    private String id;
    private String visibility;
    private String description;
    private List<String> privileges;
    private List<GroupNameAndID> groups;
    private List<UserNameAndID> users;
    private List<LiveboardNameAndID> assignedLiveboards;
    private Object userGroupContent;
    private List<String> tags;
    private Boolean isDeleted;
    private Boolean isHidden;
    private Boolean isExternal;
    private Boolean isDeprecated;
    private Boolean complete;
    private Boolean isSystemPrincipal;
    private String type;
    private String parenttype;
    private Integer groupIdx;
    private Integer metadataVersion;
    private String tenantId;
    private Double indexVersion;
    private Double generationNum;
    private Double created;
    private Double modified;
    private UserNameAndID author;
    private UserNameAndID modifiedBy;
    private UserNameAndID owner;

    /**
     * Default constructor.
     */
    public GroupResponse() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  displayName  String value for displayName.
     * @param  id  String value for id.
     * @param  visibility  String value for visibility.
     * @param  description  String value for description.
     * @param  privileges  List of String value for privileges.
     * @param  groups  List of GroupNameAndID value for groups.
     * @param  users  List of UserNameAndID value for users.
     * @param  assignedLiveboards  List of LiveboardNameAndID value for assignedLiveboards.
     * @param  userGroupContent  Object value for userGroupContent.
     * @param  tags  List of String value for tags.
     * @param  isDeleted  Boolean value for isDeleted.
     * @param  isHidden  Boolean value for isHidden.
     * @param  isExternal  Boolean value for isExternal.
     * @param  isDeprecated  Boolean value for isDeprecated.
     * @param  complete  Boolean value for complete.
     * @param  isSystemPrincipal  Boolean value for isSystemPrincipal.
     * @param  type  String value for type.
     * @param  parenttype  String value for parenttype.
     * @param  groupIdx  Integer value for groupIdx.
     * @param  metadataVersion  Integer value for metadataVersion.
     * @param  tenantId  String value for tenantId.
     * @param  indexVersion  Double value for indexVersion.
     * @param  generationNum  Double value for generationNum.
     * @param  created  Double value for created.
     * @param  modified  Double value for modified.
     * @param  author  UserNameAndID value for author.
     * @param  modifiedBy  UserNameAndID value for modifiedBy.
     * @param  owner  UserNameAndID value for owner.
     */
    public GroupResponse(
            String name,
            String displayName,
            String id,
            String visibility,
            String description,
            List<String> privileges,
            List<GroupNameAndID> groups,
            List<UserNameAndID> users,
            List<LiveboardNameAndID> assignedLiveboards,
            Object userGroupContent,
            List<String> tags,
            Boolean isDeleted,
            Boolean isHidden,
            Boolean isExternal,
            Boolean isDeprecated,
            Boolean complete,
            Boolean isSystemPrincipal,
            String type,
            String parenttype,
            Integer groupIdx,
            Integer metadataVersion,
            String tenantId,
            Double indexVersion,
            Double generationNum,
            Double created,
            Double modified,
            UserNameAndID author,
            UserNameAndID modifiedBy,
            UserNameAndID owner) {
        this.name = name;
        this.displayName = displayName;
        this.id = id;
        this.visibility = visibility;
        this.description = description;
        this.privileges = privileges;
        this.groups = groups;
        this.users = users;
        this.assignedLiveboards = assignedLiveboards;
        this.userGroupContent = userGroupContent;
        this.tags = tags;
        this.isDeleted = isDeleted;
        this.isHidden = isHidden;
        this.isExternal = isExternal;
        this.isDeprecated = isDeprecated;
        this.complete = complete;
        this.isSystemPrincipal = isSystemPrincipal;
        this.type = type;
        this.parenttype = parenttype;
        this.groupIdx = groupIdx;
        this.metadataVersion = metadataVersion;
        this.tenantId = tenantId;
        this.indexVersion = indexVersion;
        this.generationNum = generationNum;
        this.created = created;
        this.modified = modified;
        this.author = author;
        this.modifiedBy = modifiedBy;
        this.owner = owner;
    }

    /**
     * Getter for Name.
     * Name of the group
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of the group
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for DisplayName.
     * A unique display name string for the user group
     * @return Returns the String
     */
    @JsonGetter("displayName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDisplayName() {
        return displayName;
    }

    /**
     * Setter for DisplayName.
     * A unique display name string for the user group
     * @param displayName Value for String
     */
    @JsonSetter("displayName")
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    /**
     * Getter for Id.
     * GUID of the group
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * GUID of the group
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Visibility.
     * Visibility of the group
     * @return Returns the String
     */
    @JsonGetter("visibility")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVisibility() {
        return visibility;
    }

    /**
     * Setter for Visibility.
     * Visibility of the group
     * @param visibility Value for String
     */
    @JsonSetter("visibility")
    public void setVisibility(String visibility) {
        this.visibility = visibility;
    }

    /**
     * Getter for Description.
     * Description of the group
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description of the group
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Privileges.
     * Privileges assigned to the group
     * @return Returns the List of String
     */
    @JsonGetter("privileges")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getPrivileges() {
        return privileges;
    }

    /**
     * Setter for Privileges.
     * Privileges assigned to the group
     * @param privileges Value for List of String
     */
    @JsonSetter("privileges")
    public void setPrivileges(List<String> privileges) {
        this.privileges = privileges;
    }

    /**
     * Getter for Groups.
     * Name of the group to which is added
     * @return Returns the List of GroupNameAndID
     */
    @JsonGetter("groups")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<GroupNameAndID> getGroups() {
        return groups;
    }

    /**
     * Setter for Groups.
     * Name of the group to which is added
     * @param groups Value for List of GroupNameAndID
     */
    @JsonSetter("groups")
    public void setGroups(List<GroupNameAndID> groups) {
        this.groups = groups;
    }

    /**
     * Getter for Users.
     * User Group Information by Id or Name.
     * @return Returns the List of UserNameAndID
     */
    @JsonGetter("users")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<UserNameAndID> getUsers() {
        return users;
    }

    /**
     * Setter for Users.
     * User Group Information by Id or Name.
     * @param users Value for List of UserNameAndID
     */
    @JsonSetter("users")
    public void setUsers(List<UserNameAndID> users) {
        this.users = users;
    }

    /**
     * Getter for AssignedLiveboards.
     * Liveboards assigned to the group
     * @return Returns the List of LiveboardNameAndID
     */
    @JsonGetter("assignedLiveboards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<LiveboardNameAndID> getAssignedLiveboards() {
        return assignedLiveboards;
    }

    /**
     * Setter for AssignedLiveboards.
     * Liveboards assigned to the group
     * @param assignedLiveboards Value for List of LiveboardNameAndID
     */
    @JsonSetter("assignedLiveboards")
    public void setAssignedLiveboards(List<LiveboardNameAndID> assignedLiveboards) {
        this.assignedLiveboards = assignedLiveboards;
    }

    /**
     * Getter for UserGroupContent.
     * @return Returns the Object
     */
    @JsonGetter("userGroupContent")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getUserGroupContent() {
        return userGroupContent;
    }

    /**
     * Setter for UserGroupContent.
     * @param userGroupContent Value for Object
     */
    @JsonSetter("userGroupContent")
    public void setUserGroupContent(Object userGroupContent) {
        this.userGroupContent = userGroupContent;
    }

    /**
     * Getter for Tags.
     * Tags assigned to the group
     * @return Returns the List of String
     */
    @JsonGetter("tags")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getTags() {
        return tags;
    }

    /**
     * Setter for Tags.
     * Tags assigned to the group
     * @param tags Value for List of String
     */
    @JsonSetter("tags")
    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    /**
     * Getter for IsDeleted.
     * Indicates if the group is deleted
     * @return Returns the Boolean
     */
    @JsonGetter("isDeleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsDeleted() {
        return isDeleted;
    }

    /**
     * Setter for IsDeleted.
     * Indicates if the group is deleted
     * @param isDeleted Value for Boolean
     */
    @JsonSetter("isDeleted")
    public void setIsDeleted(Boolean isDeleted) {
        this.isDeleted = isDeleted;
    }

    /**
     * Getter for IsHidden.
     * Indicates if the group is hidden
     * @return Returns the Boolean
     */
    @JsonGetter("isHidden")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsHidden() {
        return isHidden;
    }

    /**
     * Setter for IsHidden.
     * Indicates if the group is hidden
     * @param isHidden Value for Boolean
     */
    @JsonSetter("isHidden")
    public void setIsHidden(Boolean isHidden) {
        this.isHidden = isHidden;
    }

    /**
     * Getter for IsExternal.
     * Indicates if the group is from external system
     * @return Returns the Boolean
     */
    @JsonGetter("isExternal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsExternal() {
        return isExternal;
    }

    /**
     * Setter for IsExternal.
     * Indicates if the group is from external system
     * @param isExternal Value for Boolean
     */
    @JsonSetter("isExternal")
    public void setIsExternal(Boolean isExternal) {
        this.isExternal = isExternal;
    }

    /**
     * Getter for IsDeprecated.
     * @return Returns the Boolean
     */
    @JsonGetter("isDeprecated")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsDeprecated() {
        return isDeprecated;
    }

    /**
     * Setter for IsDeprecated.
     * @param isDeprecated Value for Boolean
     */
    @JsonSetter("isDeprecated")
    public void setIsDeprecated(Boolean isDeprecated) {
        this.isDeprecated = isDeprecated;
    }

    /**
     * Getter for Complete.
     * Indicates if the all the properties of group is provided
     * @return Returns the Boolean
     */
    @JsonGetter("complete")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getComplete() {
        return complete;
    }

    /**
     * Setter for Complete.
     * Indicates if the all the properties of group is provided
     * @param complete Value for Boolean
     */
    @JsonSetter("complete")
    public void setComplete(Boolean complete) {
        this.complete = complete;
    }

    /**
     * Getter for IsSystemPrincipal.
     * Indicates if the group is system principal
     * @return Returns the Boolean
     */
    @JsonGetter("isSystemPrincipal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getIsSystemPrincipal() {
        return isSystemPrincipal;
    }

    /**
     * Setter for IsSystemPrincipal.
     * Indicates if the group is system principal
     * @param isSystemPrincipal Value for Boolean
     */
    @JsonSetter("isSystemPrincipal")
    public void setIsSystemPrincipal(Boolean isSystemPrincipal) {
        this.isSystemPrincipal = isSystemPrincipal;
    }

    /**
     * Getter for Type.
     * Indicates the type of group
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Indicates the type of group
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Parenttype.
     * Indicates the type of parent object
     * @return Returns the String
     */
    @JsonGetter("parenttype")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getParenttype() {
        return parenttype;
    }

    /**
     * Setter for Parenttype.
     * Indicates the type of parent object
     * @param parenttype Value for String
     */
    @JsonSetter("parenttype")
    public void setParenttype(String parenttype) {
        this.parenttype = parenttype;
    }

    /**
     * Getter for GroupIdx.
     * @return Returns the Integer
     */
    @JsonGetter("groupIdx")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getGroupIdx() {
        return groupIdx;
    }

    /**
     * Setter for GroupIdx.
     * @param groupIdx Value for Integer
     */
    @JsonSetter("groupIdx")
    public void setGroupIdx(Integer groupIdx) {
        this.groupIdx = groupIdx;
    }

    /**
     * Getter for MetadataVersion.
     * @return Returns the Integer
     */
    @JsonGetter("metadataVersion")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMetadataVersion() {
        return metadataVersion;
    }

    /**
     * Setter for MetadataVersion.
     * @param metadataVersion Value for Integer
     */
    @JsonSetter("metadataVersion")
    public void setMetadataVersion(Integer metadataVersion) {
        this.metadataVersion = metadataVersion;
    }

    /**
     * Getter for TenantId.
     * Tenant id associated with the group
     * @return Returns the String
     */
    @JsonGetter("tenantId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTenantId() {
        return tenantId;
    }

    /**
     * Setter for TenantId.
     * Tenant id associated with the group
     * @param tenantId Value for String
     */
    @JsonSetter("tenantId")
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }

    /**
     * Getter for IndexVersion.
     * @return Returns the Double
     */
    @JsonGetter("indexVersion")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getIndexVersion() {
        return indexVersion;
    }

    /**
     * Setter for IndexVersion.
     * @param indexVersion Value for Double
     */
    @JsonSetter("indexVersion")
    public void setIndexVersion(Double indexVersion) {
        this.indexVersion = indexVersion;
    }

    /**
     * Getter for GenerationNum.
     * @return Returns the Double
     */
    @JsonGetter("generationNum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getGenerationNum() {
        return generationNum;
    }

    /**
     * Setter for GenerationNum.
     * @param generationNum Value for Double
     */
    @JsonSetter("generationNum")
    public void setGenerationNum(Double generationNum) {
        this.generationNum = generationNum;
    }

    /**
     * Getter for Created.
     * Date and time when group was created
     * @return Returns the Double
     */
    @JsonGetter("created")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCreated() {
        return created;
    }

    /**
     * Setter for Created.
     * Date and time when group was created
     * @param created Value for Double
     */
    @JsonSetter("created")
    public void setCreated(Double created) {
        this.created = created;
    }

    /**
     * Getter for Modified.
     * Date and time of last modification of the group
     * @return Returns the Double
     */
    @JsonGetter("modified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getModified() {
        return modified;
    }

    /**
     * Setter for Modified.
     * Date and time of last modification of the group
     * @param modified Value for Double
     */
    @JsonSetter("modified")
    public void setModified(Double modified) {
        this.modified = modified;
    }

    /**
     * Getter for Author.
     * @return Returns the UserNameAndID
     */
    @JsonGetter("author")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UserNameAndID getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for UserNameAndID
     */
    @JsonSetter("author")
    public void setAuthor(UserNameAndID author) {
        this.author = author;
    }

    /**
     * Getter for ModifiedBy.
     * @return Returns the UserNameAndID
     */
    @JsonGetter("modifiedBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UserNameAndID getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Setter for ModifiedBy.
     * @param modifiedBy Value for UserNameAndID
     */
    @JsonSetter("modifiedBy")
    public void setModifiedBy(UserNameAndID modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Getter for Owner.
     * @return Returns the UserNameAndID
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public UserNameAndID getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for UserNameAndID
     */
    @JsonSetter("owner")
    public void setOwner(UserNameAndID owner) {
        this.owner = owner;
    }

    /**
     * Converts this GroupResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "GroupResponse [" + "name=" + name + ", displayName=" + displayName + ", id=" + id
                + ", visibility=" + visibility + ", description=" + description + ", privileges="
                + privileges + ", groups=" + groups + ", users=" + users + ", assignedLiveboards="
                + assignedLiveboards + ", userGroupContent=" + userGroupContent + ", tags=" + tags
                + ", isDeleted=" + isDeleted + ", isHidden=" + isHidden + ", isExternal="
                + isExternal + ", isDeprecated=" + isDeprecated + ", complete=" + complete
                + ", isSystemPrincipal=" + isSystemPrincipal + ", type=" + type + ", parenttype="
                + parenttype + ", groupIdx=" + groupIdx + ", metadataVersion=" + metadataVersion
                + ", tenantId=" + tenantId + ", indexVersion=" + indexVersion + ", generationNum="
                + generationNum + ", created=" + created + ", modified=" + modified + ", author="
                + author + ", modifiedBy=" + modifiedBy + ", owner=" + owner + "]";
    }

    /**
     * Builds a new {@link Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .displayName(getDisplayName())
                .id(getId())
                .visibility(getVisibility())
                .description(getDescription())
                .privileges(getPrivileges())
                .groups(getGroups())
                .users(getUsers())
                .assignedLiveboards(getAssignedLiveboards())
                .userGroupContent(getUserGroupContent())
                .tags(getTags())
                .isDeleted(getIsDeleted())
                .isHidden(getIsHidden())
                .isExternal(getIsExternal())
                .isDeprecated(getIsDeprecated())
                .complete(getComplete())
                .isSystemPrincipal(getIsSystemPrincipal())
                .type(getType())
                .parenttype(getParenttype())
                .groupIdx(getGroupIdx())
                .metadataVersion(getMetadataVersion())
                .tenantId(getTenantId())
                .indexVersion(getIndexVersion())
                .generationNum(getGenerationNum())
                .created(getCreated())
                .modified(getModified())
                .author(getAuthor())
                .modifiedBy(getModifiedBy())
                .owner(getOwner());
        return builder;
    }

    /**
     * Class to build instances of {@link GroupResponse}.
     */
    public static class Builder {
        private String name;
        private String displayName;
        private String id;
        private String visibility;
        private String description;
        private List<String> privileges;
        private List<GroupNameAndID> groups;
        private List<UserNameAndID> users;
        private List<LiveboardNameAndID> assignedLiveboards;
        private Object userGroupContent;
        private List<String> tags;
        private Boolean isDeleted;
        private Boolean isHidden;
        private Boolean isExternal;
        private Boolean isDeprecated;
        private Boolean complete;
        private Boolean isSystemPrincipal;
        private String type;
        private String parenttype;
        private Integer groupIdx;
        private Integer metadataVersion;
        private String tenantId;
        private Double indexVersion;
        private Double generationNum;
        private Double created;
        private Double modified;
        private UserNameAndID author;
        private UserNameAndID modifiedBy;
        private UserNameAndID owner;



        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for displayName.
         * @param  displayName  String value for displayName.
         * @return Builder
         */
        public Builder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for visibility.
         * @param  visibility  String value for visibility.
         * @return Builder
         */
        public Builder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for privileges.
         * @param  privileges  List of String value for privileges.
         * @return Builder
         */
        public Builder privileges(List<String> privileges) {
            this.privileges = privileges;
            return this;
        }

        /**
         * Setter for groups.
         * @param  groups  List of GroupNameAndID value for groups.
         * @return Builder
         */
        public Builder groups(List<GroupNameAndID> groups) {
            this.groups = groups;
            return this;
        }

        /**
         * Setter for users.
         * @param  users  List of UserNameAndID value for users.
         * @return Builder
         */
        public Builder users(List<UserNameAndID> users) {
            this.users = users;
            return this;
        }

        /**
         * Setter for assignedLiveboards.
         * @param  assignedLiveboards  List of LiveboardNameAndID value for assignedLiveboards.
         * @return Builder
         */
        public Builder assignedLiveboards(List<LiveboardNameAndID> assignedLiveboards) {
            this.assignedLiveboards = assignedLiveboards;
            return this;
        }

        /**
         * Setter for userGroupContent.
         * @param  userGroupContent  Object value for userGroupContent.
         * @return Builder
         */
        public Builder userGroupContent(Object userGroupContent) {
            this.userGroupContent = userGroupContent;
            return this;
        }

        /**
         * Setter for tags.
         * @param  tags  List of String value for tags.
         * @return Builder
         */
        public Builder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Setter for isDeleted.
         * @param  isDeleted  Boolean value for isDeleted.
         * @return Builder
         */
        public Builder isDeleted(Boolean isDeleted) {
            this.isDeleted = isDeleted;
            return this;
        }

        /**
         * Setter for isHidden.
         * @param  isHidden  Boolean value for isHidden.
         * @return Builder
         */
        public Builder isHidden(Boolean isHidden) {
            this.isHidden = isHidden;
            return this;
        }

        /**
         * Setter for isExternal.
         * @param  isExternal  Boolean value for isExternal.
         * @return Builder
         */
        public Builder isExternal(Boolean isExternal) {
            this.isExternal = isExternal;
            return this;
        }

        /**
         * Setter for isDeprecated.
         * @param  isDeprecated  Boolean value for isDeprecated.
         * @return Builder
         */
        public Builder isDeprecated(Boolean isDeprecated) {
            this.isDeprecated = isDeprecated;
            return this;
        }

        /**
         * Setter for complete.
         * @param  complete  Boolean value for complete.
         * @return Builder
         */
        public Builder complete(Boolean complete) {
            this.complete = complete;
            return this;
        }

        /**
         * Setter for isSystemPrincipal.
         * @param  isSystemPrincipal  Boolean value for isSystemPrincipal.
         * @return Builder
         */
        public Builder isSystemPrincipal(Boolean isSystemPrincipal) {
            this.isSystemPrincipal = isSystemPrincipal;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for parenttype.
         * @param  parenttype  String value for parenttype.
         * @return Builder
         */
        public Builder parenttype(String parenttype) {
            this.parenttype = parenttype;
            return this;
        }

        /**
         * Setter for groupIdx.
         * @param  groupIdx  Integer value for groupIdx.
         * @return Builder
         */
        public Builder groupIdx(Integer groupIdx) {
            this.groupIdx = groupIdx;
            return this;
        }

        /**
         * Setter for metadataVersion.
         * @param  metadataVersion  Integer value for metadataVersion.
         * @return Builder
         */
        public Builder metadataVersion(Integer metadataVersion) {
            this.metadataVersion = metadataVersion;
            return this;
        }

        /**
         * Setter for tenantId.
         * @param  tenantId  String value for tenantId.
         * @return Builder
         */
        public Builder tenantId(String tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        /**
         * Setter for indexVersion.
         * @param  indexVersion  Double value for indexVersion.
         * @return Builder
         */
        public Builder indexVersion(Double indexVersion) {
            this.indexVersion = indexVersion;
            return this;
        }

        /**
         * Setter for generationNum.
         * @param  generationNum  Double value for generationNum.
         * @return Builder
         */
        public Builder generationNum(Double generationNum) {
            this.generationNum = generationNum;
            return this;
        }

        /**
         * Setter for created.
         * @param  created  Double value for created.
         * @return Builder
         */
        public Builder created(Double created) {
            this.created = created;
            return this;
        }

        /**
         * Setter for modified.
         * @param  modified  Double value for modified.
         * @return Builder
         */
        public Builder modified(Double modified) {
            this.modified = modified;
            return this;
        }

        /**
         * Setter for author.
         * @param  author  UserNameAndID value for author.
         * @return Builder
         */
        public Builder author(UserNameAndID author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for modifiedBy.
         * @param  modifiedBy  UserNameAndID value for modifiedBy.
         * @return Builder
         */
        public Builder modifiedBy(UserNameAndID modifiedBy) {
            this.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  UserNameAndID value for owner.
         * @return Builder
         */
        public Builder owner(UserNameAndID owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Builds a new {@link GroupResponse} object using the set fields.
         * @return {@link GroupResponse}
         */
        public GroupResponse build() {
            return new GroupResponse(name, displayName, id, visibility, description, privileges,
                    groups, users, assignedLiveboards, userGroupContent, tags, isDeleted, isHidden,
                    isExternal, isDeprecated, complete, isSystemPrincipal, type, parenttype,
                    groupIdx, metadataVersion, tenantId, indexVersion, generationNum, created,
                    modified, author, modifiedBy, owner);
        }
    }
}
