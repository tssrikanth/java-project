/*
 * RESTAPISDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package localhost.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for LogicalTableHeader type.
 */
public class LogicalTableHeader {
    private String id;
    private String name;
    private String author;
    private String authorName;
    private String authorDisplayName;
    private Double created;
    private Double modified;
    private String modifiedBy;
    private Integer generationNum;
    private String owner;
    private Boolean deleted;
    private Boolean hidden;
    private String database;
    private String schema;
    private String type;
    private String subType;

    /**
     * Default constructor.
     */
    public LogicalTableHeader() {
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  name  String value for name.
     * @param  author  String value for author.
     * @param  authorName  String value for authorName.
     * @param  authorDisplayName  String value for authorDisplayName.
     * @param  created  Double value for created.
     * @param  modified  Double value for modified.
     * @param  modifiedBy  String value for modifiedBy.
     * @param  generationNum  Integer value for generationNum.
     * @param  owner  String value for owner.
     * @param  deleted  Boolean value for deleted.
     * @param  hidden  Boolean value for hidden.
     * @param  database  String value for database.
     * @param  schema  String value for schema.
     * @param  type  String value for type.
     * @param  subType  String value for subType.
     */
    public LogicalTableHeader(
            String id,
            String name,
            String author,
            String authorName,
            String authorDisplayName,
            Double created,
            Double modified,
            String modifiedBy,
            Integer generationNum,
            String owner,
            Boolean deleted,
            Boolean hidden,
            String database,
            String schema,
            String type,
            String subType) {
        this.id = id;
        this.name = name;
        this.author = author;
        this.authorName = authorName;
        this.authorDisplayName = authorDisplayName;
        this.created = created;
        this.modified = modified;
        this.modifiedBy = modifiedBy;
        this.generationNum = generationNum;
        this.owner = owner;
        this.deleted = deleted;
        this.hidden = hidden;
        this.database = database;
        this.schema = schema;
        this.type = type;
        this.subType = subType;
    }

    /**
     * Getter for Id.
     * @return Returns the String
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Author.
     * @return Returns the String
     */
    @JsonGetter("author")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuthor() {
        return author;
    }

    /**
     * Setter for Author.
     * @param author Value for String
     */
    @JsonSetter("author")
    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * Getter for AuthorName.
     * @return Returns the String
     */
    @JsonGetter("authorName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuthorName() {
        return authorName;
    }

    /**
     * Setter for AuthorName.
     * @param authorName Value for String
     */
    @JsonSetter("authorName")
    public void setAuthorName(String authorName) {
        this.authorName = authorName;
    }

    /**
     * Getter for AuthorDisplayName.
     * @return Returns the String
     */
    @JsonGetter("authorDisplayName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAuthorDisplayName() {
        return authorDisplayName;
    }

    /**
     * Setter for AuthorDisplayName.
     * @param authorDisplayName Value for String
     */
    @JsonSetter("authorDisplayName")
    public void setAuthorDisplayName(String authorDisplayName) {
        this.authorDisplayName = authorDisplayName;
    }

    /**
     * Getter for Created.
     * @return Returns the Double
     */
    @JsonGetter("created")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getCreated() {
        return created;
    }

    /**
     * Setter for Created.
     * @param created Value for Double
     */
    @JsonSetter("created")
    public void setCreated(Double created) {
        this.created = created;
    }

    /**
     * Getter for Modified.
     * @return Returns the Double
     */
    @JsonGetter("modified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Double getModified() {
        return modified;
    }

    /**
     * Setter for Modified.
     * @param modified Value for Double
     */
    @JsonSetter("modified")
    public void setModified(Double modified) {
        this.modified = modified;
    }

    /**
     * Getter for ModifiedBy.
     * @return Returns the String
     */
    @JsonGetter("modifiedBy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getModifiedBy() {
        return modifiedBy;
    }

    /**
     * Setter for ModifiedBy.
     * @param modifiedBy Value for String
     */
    @JsonSetter("modifiedBy")
    public void setModifiedBy(String modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    /**
     * Getter for GenerationNum.
     * @return Returns the Integer
     */
    @JsonGetter("generationNum")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getGenerationNum() {
        return generationNum;
    }

    /**
     * Setter for GenerationNum.
     * @param generationNum Value for Integer
     */
    @JsonSetter("generationNum")
    public void setGenerationNum(Integer generationNum) {
        this.generationNum = generationNum;
    }

    /**
     * Getter for Owner.
     * @return Returns the String
     */
    @JsonGetter("owner")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOwner() {
        return owner;
    }

    /**
     * Setter for Owner.
     * @param owner Value for String
     */
    @JsonSetter("owner")
    public void setOwner(String owner) {
        this.owner = owner;
    }

    /**
     * Getter for Deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Hidden.
     * @return Returns the Boolean
     */
    @JsonGetter("hidden")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getHidden() {
        return hidden;
    }

    /**
     * Setter for Hidden.
     * @param hidden Value for Boolean
     */
    @JsonSetter("hidden")
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Getter for Database.
     * @return Returns the String
     */
    @JsonGetter("database")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDatabase() {
        return database;
    }

    /**
     * Setter for Database.
     * @param database Value for String
     */
    @JsonSetter("database")
    public void setDatabase(String database) {
        this.database = database;
    }

    /**
     * Getter for Schema.
     * @return Returns the String
     */
    @JsonGetter("schema")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSchema() {
        return schema;
    }

    /**
     * Setter for Schema.
     * @param schema Value for String
     */
    @JsonSetter("schema")
    public void setSchema(String schema) {
        this.schema = schema;
    }

    /**
     * Getter for Type.
     * @return Returns the String
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * @param type Value for String
     */
    @JsonSetter("type")
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for SubType.
     * @return Returns the String
     */
    @JsonGetter("subType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSubType() {
        return subType;
    }

    /**
     * Setter for SubType.
     * @param subType Value for String
     */
    @JsonSetter("subType")
    public void setSubType(String subType) {
        this.subType = subType;
    }

    /**
     * Converts this LogicalTableHeader into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LogicalTableHeader [" + "id=" + id + ", name=" + name + ", author=" + author
                + ", authorName=" + authorName + ", authorDisplayName=" + authorDisplayName
                + ", created=" + created + ", modified=" + modified + ", modifiedBy=" + modifiedBy
                + ", generationNum=" + generationNum + ", owner=" + owner + ", deleted=" + deleted
                + ", hidden=" + hidden + ", database=" + database + ", schema=" + schema + ", type="
                + type + ", subType=" + subType + "]";
    }

    /**
     * Builds a new {@link Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .name(getName())
                .author(getAuthor())
                .authorName(getAuthorName())
                .authorDisplayName(getAuthorDisplayName())
                .created(getCreated())
                .modified(getModified())
                .modifiedBy(getModifiedBy())
                .generationNum(getGenerationNum())
                .owner(getOwner())
                .deleted(getDeleted())
                .hidden(getHidden())
                .database(getDatabase())
                .schema(getSchema())
                .type(getType())
                .subType(getSubType());
        return builder;
    }

    /**
     * Class to build instances of {@link LogicalTableHeader}.
     */
    public static class Builder {
        private String id;
        private String name;
        private String author;
        private String authorName;
        private String authorDisplayName;
        private Double created;
        private Double modified;
        private String modifiedBy;
        private Integer generationNum;
        private String owner;
        private Boolean deleted;
        private Boolean hidden;
        private String database;
        private String schema;
        private String type;
        private String subType;



        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for author.
         * @param  author  String value for author.
         * @return Builder
         */
        public Builder author(String author) {
            this.author = author;
            return this;
        }

        /**
         * Setter for authorName.
         * @param  authorName  String value for authorName.
         * @return Builder
         */
        public Builder authorName(String authorName) {
            this.authorName = authorName;
            return this;
        }

        /**
         * Setter for authorDisplayName.
         * @param  authorDisplayName  String value for authorDisplayName.
         * @return Builder
         */
        public Builder authorDisplayName(String authorDisplayName) {
            this.authorDisplayName = authorDisplayName;
            return this;
        }

        /**
         * Setter for created.
         * @param  created  Double value for created.
         * @return Builder
         */
        public Builder created(Double created) {
            this.created = created;
            return this;
        }

        /**
         * Setter for modified.
         * @param  modified  Double value for modified.
         * @return Builder
         */
        public Builder modified(Double modified) {
            this.modified = modified;
            return this;
        }

        /**
         * Setter for modifiedBy.
         * @param  modifiedBy  String value for modifiedBy.
         * @return Builder
         */
        public Builder modifiedBy(String modifiedBy) {
            this.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * Setter for generationNum.
         * @param  generationNum  Integer value for generationNum.
         * @return Builder
         */
        public Builder generationNum(Integer generationNum) {
            this.generationNum = generationNum;
            return this;
        }

        /**
         * Setter for owner.
         * @param  owner  String value for owner.
         * @return Builder
         */
        public Builder owner(String owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for hidden.
         * @param  hidden  Boolean value for hidden.
         * @return Builder
         */
        public Builder hidden(Boolean hidden) {
            this.hidden = hidden;
            return this;
        }

        /**
         * Setter for database.
         * @param  database  String value for database.
         * @return Builder
         */
        public Builder database(String database) {
            this.database = database;
            return this;
        }

        /**
         * Setter for schema.
         * @param  schema  String value for schema.
         * @return Builder
         */
        public Builder schema(String schema) {
            this.schema = schema;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for subType.
         * @param  subType  String value for subType.
         * @return Builder
         */
        public Builder subType(String subType) {
            this.subType = subType;
            return this;
        }

        /**
         * Builds a new {@link LogicalTableHeader} object using the set fields.
         * @return {@link LogicalTableHeader}
         */
        public LogicalTableHeader build() {
            return new LogicalTableHeader(id, name, author, authorName, authorDisplayName, created,
                    modified, modifiedBy, generationNum, owner, deleted, hidden, database, schema,
                    type, subType);
        }
    }
}
